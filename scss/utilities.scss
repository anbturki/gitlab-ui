// Spacing utility classes. Based on gitlab spacing scale.

@mixin utility-style($utility-base-name, $utility-suffix, $is-silent-only: false) {
  $utility-name: null;

  @if $utility-base-name != '' and $utility-suffix != '' {
    $utility-name: #{'#{$utility-base-name}-#{$utility-suffix}'};
  } @else if $utility-base-name != '' {
    $utility-name: $utility-base-name;
  } @else {
    $utility-name: $utility-suffix;
  }

  $utility-silent-class: '%#{$utility-name}';
  $utility-class: '.#{$utility-name}';

  #{$utility-silent-class} { @content; }

  @if $is-silent-only == false {
    #{$utility-class} { @extend #{$utility-silent-class}; }
  }
}

/*
* Marks a style declration as !important. In the
* first iteration of the silent classes library,
* it has been decided to maintain their style declarations
* not important by default.
*/
@function important($value, $is-important: false) {
  @if ($is-important == true) {
    @return $value !important;
  } @else {
    @return $value;
  }
}

@each $name, $space in $gl-spacing-scale {
  // Padding
  @include utility-style('gl-p', $name) {
    padding: important($space);
  }

  @include utility-style('gl-pl', $name) {
    padding-left: important($space);
  }

  @include utility-style('gl-pr', $name) {
    padding-right: important($space);
  }

  @include utility-style('gl-px', $name) {
    padding-left: important($space);
    padding-right: important($space);
  }

  @include utility-style('gl-pt', $name) {
    padding-top: important($space);
  }

  @include utility-style('gl-pb', $name) {
    padding-bottom: important($space);
  }

  @include utility-style('gl-py', $name) {
    padding-top: important($space);
    padding-bottom: important($space);
  }
}

// Border utility classes

// Border Style
@each $border-style in solid, dashed, dotted, none {
  @include utility-style('gl-border', $border-style) {
    border-style: important($border-style);
  }
}

// Border Size
@each $name, $size in $gl-border-sizes {
  @include utility-style('gl-border', $name) {
    border-width: important($size);
  }

  @include utility-style('gl-border-t', $name) {
    border-top-width: important($size);
  }

  @include utility-style('gl-border-b', $name) {
    border-bottom-width: important($size);
  }

  @include utility-style('gl-border-r', $name) {
    border-right-width: important($size);
  }

  @include utility-style('gl-border-l', $name) {
    border-left-width: important($size);
  }
}

// Border Roundness
@each $name, $round-size  in $gl-rounded-sizes {
  @include utility-style('gl-rounded', $name) {
    border-radius: important($round-size);
  }
}

// Color utility classes
// background, text, and border colors based on gitlab color variables
@each $group-name, $color-group in $gl-color-groups {
  @each $color-name, $color in $color-group {
    $suffix: null;

    @if $group-name != '' {
      $suffix: '#{$group-name}-#{$color-name}';
    } @else {
      $suffix: $color-name;
    }

    @include utility-style('gl-bg', $suffix) {
      background-color: important($color);
    }

    @include utility-style('gl-text', $suffix) {
      color: important($color);
    }

    @include utility-style('gl-border', $suffix) {
      border-color: important($color);
    }
  }
}

// Text utility classes

// font-family
@each $font-name, $font in $gl-fonts {
  @include utility-style('gl-font', $font-name) {
    font-family: important($font);
  }
}

// font-weight
@each $weight-name, $weight in $gl-font-weights {
  @include utility-style('gl-font', $weight-name) {
    font-weight: important($weight);
  }
}

// font-size
@each $size-name, $size in $gl-type-scale {
  @include utility-style('gl-font', $size-name) {
    font-size: important($size);
  }
}

// Line height
@each $name, $line-height in $gl-line-heights {
  @include utility-style('gl-line-height', $name) {
    line-height: important($line-height);
  }
}

// Interactivity utility classes

// Cursors
@each $cursor in (auto, default, pointer, wait, text, move, not-allowed) {
  @include utility-style('gl-cursor', $cursor) {
    cursor: important($cursor);
  }
}

// Position utilities

// Position type
@each $position-type in (static, fixed, absolute, relative, sticky) {
  @include utility-style('gl-position', $position-type) {
    position: $position-type;
  }
}

// Relative/Absolute positions
$positions: (
  'top-0': (
    top: 0
  ),
  'bottom-0': (
    bottom: 0
  ),
  'right-0': (
    right: 0
  ),
  'left-0': (
    left: 0
  )
);

@each $position-name, $position-cords in $positions {
  @include utility-style('gl', $position-name) {
    @each $coord-axis, $coord-value  in $position-cords {
      #{$coord-axis}: $coord-value;
    }
  }
}
